Course:
https://learn.justdjango.com/courses/react-markdown-blog/learning-react

JustDjango repositories:
https://github.com/justdjango/rest-markdown-blog-ui
https://github.com/justdjango/rest-markdown-blog-api

My repositories:
https://github.com/ppalancica/REACT-MARKDOWN-BLOG (Project 1)
https://github.com/ppalancica/REACT-MARKDOWN-BLOG-api (Project 2a)
https://github.com/ppalancica/REACT-MARKDOWN-BLOG-ui (Project 2b)



kill -9 PID

https://medium.com/@firstsquares/eacces-error-react-create-react-app-mac-6db837c8dd52
// https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally

https://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x
https://docs.npmjs.com/cli/v7/using-npm/removal

Copy and paste the command from https://github.com/nvm-sh/nvm#installing-and-updating:

$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash

=> Close and reopen your terminal to start using nvm or run the following to use it now:

$ export NVM_DIR="$HOME/.nvm"
$ [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

Verify installation (should see nvm):

$ command -v nvm

Install Node.JS LTS:

$ nvm install --lts

Check the installed versions:

$ node -v
v14.17.6
$ npm -v
6.14.15



---

https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/
https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token

(Note that installing with the wizard could create EACCES errors)
https://stackoverflow.com/questions/53455753/ubuntu-create-react-app-fails-with-permission-denied

This package has installed:
	•	Node.js v14.17.6 to /usr/local/bin/node
	•	npm v6.14.15 to /usr/local/bin/npm
Make sure that /usr/local/bin is in your $PATH.

---



--- Section 1 - Intro

ReactJS Tutorial for Beginners - Getting Started with React
https://www.youtube.com/watch?v=pgAvVxowaYU
React Crash Course for Beginners 2021 - Learn ReactJS from Scratch in this 100% Free Tutorial!
https://www.youtube.com/watch?v=Dorf8i6lCuk

Complete React Tutorial (& Redux ) #1- Introduction
https://www.youtube.com/watch?v=OxIDLw0M-m0&list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG

https://reactjs.org/docs/create-a-new-react-app.html

Click the Create React App link: https://github.com/facebook/create-react-app

Set up a modern web app by running one command: https://create-react-app.dev/

Click Get Started: https://create-react-app.dev/docs/getting-started

Check if you have npm installed:
$ npm -v
6.14.15

$ npm install -g create-react-app

$ npx create-react-app restblog

Create a virtual environment:

$ virtualenv env

$ source env/bin/activate

$ pip install django

$ django-admin startproject apiblog

Rename root folder from apiblog to backend.

$ cd backend/

$ python manage.py migrate

$ python manage.py runserver

Go to https://www.django-rest-framework.org/
Click on Installation.

Copy and paste (stop the serverm but make sure env is activated):
$ pip install djangorestframework

Add Django Rest Framework to settings:

INSTALLED_APPS = [
    ...
    'rest_framework',
]

Add the following to your root urls.py file:

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api-auth/', include('rest_framework.urls'))
]

Rename restblog to frontend.

$ cd frontend/

$ npm run start

(should be able to see a default page at http://localhost:3000/)

Open src/App.js and change it to:

//import React from "react";
import './App.css';
import BlogList from "./components/BlogList";

function App() {
  return (
    <BlogList/>
  );
}

export default App;

Create a frontend/src/components folder and a BlogList.js file inside it:

import React, { useEffect, useState } from "react";

const BlogList = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    setLoading(true);
    fetch('http://127.0.0.1:8000/api/blog/posts/')
      .then(res => res.json())
      .then(data => {
        console.log(data);
        setData(data);
        setLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      })
  }, [])

  return (
    <div style={{ margin: 10, padding: 10 }}>
      <h1>Post List</h1>
      {error && (
        <h4 style={{ padding: 5, color: "red" }}>An error occured: {error}</h4>
      )}
      {loading ? <div>Loading...</div> : (
        <div>
          {data && (
            <div>There is data</div>
          )}
        </div>
      )}
    </div>
  );
}

export default BlogList

Create a Django app:

$ python manage.py startapp blog

Add 'blog' entry to settings.py

Add to models.py:

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()

    def __str__(self):
        return self.title

Add to admin.py:

from django.contrib import admin
from .models import Post

# Register your models here.

admin.site.register(Post)

$ python manage.py makemigrations

$ python manage.py migrate

$ python manage.py runserver

Create a serializers.py file inside backend/blog:

from rest_framework import serializers
from .models import Post

class PostSerializer(serializers.Serializer):
    title = serializers.CharField()
    content = serializers.CharField()

Add to backend/blog/views.py:

from rest_framework import generics
from rest_framework.permissions import AllowAny
from .models import Post
from .serializers import PostSerializer

class PostListView(generics.ListAPIView):
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    permission_classes = [AllowAny]

Create a urls.py file inside backend/blog:

from django.urls import path

from . import views

app_name = 'blog'

urlpatterns = [
    path('posts/', views.PostListView.as_view())
]

Add a new path entry to backend/apiblog/urls.py:

path('api/blog/', include('blog.urls', namespace='blog'))

Got to https://pypi.org/project/django-cors-headers/

$ pip install django-cors-headers

Add 'corsheaders' entry to INSTALLED_APPS in settings.py

Add 'corsheaders.middleware.CorsMiddleware' entry to MIDDLEWARE:
(above 'django.middleware.common.CommonMiddleware',)

Also add:

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

(env) $ python manage.py runserver

Open http://127.0.0.1:8000/api/blog/posts/ and we should see an empty list response.

(env) $ python manage.py createsuperuser

---
(env) ppalancica@Pavels-MacBook-Pro backend % python manage.py createsuperuser
Username (leave blank to use 'ppalancica'): ppalancica
Email address: pavel@site.com
Password:
Password (again):
Superuser created successfully.
---

$ python manage.py runserver

Login at http://127.0.0.1:8000/admin, click on Posts and add a "test" post with title and content.

If we open http://127.0.0.1:8000/api/blog/posts/ we should see that post returned by the API.

Now we want to render that data.

Inside BlogList.js replace:

{data && (
  <div>There is data</div>
)}

with:

{data && data.map(post => {
    return (
      <div>
        <h3>{post.title}</h3>
        <p>{post.content}</p>
      </div>
    )
  })
}
